#+title: Extended Regular Expressions
#+index: 9
#+breadcrumbs: index:/index.html
#+back: << Intro To Regex:/intro-to-regex.html
#+source: https://youtu.be/fAgz66M4aNc?si=ybChoNNggXGZmo8U

* Regular expression concepts
A regex is a language describing text to be matched

A regex is composed of:
+ *regular chars* that stand for themselves
+ *metachars* that stand for a regular expression
+ *expressions* denoting categories of chars or sub-parts of a regex

Historically, different tools used different regex "flavors"

POSIX standardizes 2 flavours.
Other tools enhances regexs beyond what we cover here

+ *Basic Regucal Expression (BRE)*
  - simpler to learn, less computationally expensive
+ *Extended Regucal Expression (*ERE)*
  - much more powerful, more expensive
  - on moern systems, no real difference in "expense"

What programs use regex?
+ The =grep= family
  - =grep= - BRE
  - =egrep= and =grep -E= - ERE
  - =fgrep= and =grep -F= - string matching in parallel
  - POSIX standardizing brings them all into the single =grep= command
+ =sed= - text matching and substitution
+ =awk= - pattern matching with programming
+ text editors: =ed=, =ex=, =vim=, =emacs=
+ scripting languages, usually with their on flavours

** =grep= options
+ use =pat= as pattern: =-e pat=
+ read list of patterns from file: =-f file=
+ ignore case in input: =-i=
+ list matching input files: =-l=
+ print lines that don't match: =-v=
+ supress output ("quiet", exit status only): =-q=
  - often, you can use => /dev/null= instead (more obvious)
+ don't print errors ("silent"): =-s=

** Robustness
+ invest time in learning regexs
+ use EREs wherever possible
+ *always quote your regexs on the shell command line*

* Basic regex components
